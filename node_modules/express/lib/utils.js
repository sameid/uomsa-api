/**
 * Module dependencies.
 */

var mime = require('send').mime;
var crc32 = require('buffer-crc32');

/**
 * Return ETag for `body`.
 *
 * @param {String|Buffer***REMOVED*** body
 * @return {String***REMOVED***
 * @api private
 */

exports.etag = function(body){
  return '"' + crc32.signed(body) + '"';
***REMOVED***;

/**
 * Check if `path` looks absolute.
 *
 * @param {String***REMOVED*** path
 * @return {Boolean***REMOVED***
 * @api private
 */

exports.isAbsolute = function(path){
  if ('/' == path[0]) return true;
  if (':' == path[1] && '\\' == path[2]) return true;
  if ('\\\\' == path.substring(0, 2)) return true; // Microsoft Azure absolute path
***REMOVED***;

/**
 * Flatten the given `arr`.
 *
 * @param {Array***REMOVED*** arr
 * @return {Array***REMOVED***
 * @api private
 */

exports.flatten = function(arr, ret){
  ret = ret || [];
  var len = arr.length;
  for (var i = 0; i < len; ++i) {
    if (Array.isArray(arr[i])) {
      exports.flatten(arr[i], ret);
    ***REMOVED*** else {
      ret.push(arr[i]);
    ***REMOVED***
  ***REMOVED***
  return ret;
***REMOVED***;

/**
 * Normalize the given `type`, for example "html" becomes "text/html".
 *
 * @param {String***REMOVED*** type
 * @return {Object***REMOVED***
 * @api private
 */

exports.normalizeType = function(type){
  return ~type.indexOf('/')
    ? acceptParams(type)
    : { value: mime.lookup(type), params: {***REMOVED*** ***REMOVED***;
***REMOVED***;

/**
 * Normalize `types`, for example "html" becomes "text/html".
 *
 * @param {Array***REMOVED*** types
 * @return {Array***REMOVED***
 * @api private
 */

exports.normalizeTypes = function(types){
  var ret = [];

  for (var i = 0; i < types.length; ++i) {
    ret.push(exports.normalizeType(types[i]));
  ***REMOVED***

  return ret;
***REMOVED***;

/**
 * Parse accept params `str` returning an
 * object with `.value`, `.quality` and `.params`.
 * also includes `.originalIndex` for stable sorting
 *
 * @param {String***REMOVED*** str
 * @return {Object***REMOVED***
 * @api private
 */

function acceptParams(str, index) {
  var parts = str.split(/ *; */);
  var ret = { value: parts[0], quality: 1, params: {***REMOVED***, originalIndex: index ***REMOVED***;

  for (var i = 1; i < parts.length; ++i) {
    var pms = parts[i].split(/ *= */);
    if ('q' == pms[0]) {
      ret.quality = parseFloat(pms[1]);
    ***REMOVED*** else {
      ret.params[pms[0]] = pms[1];
    ***REMOVED***
  ***REMOVED***

  return ret;
***REMOVED***
