var events = require("events"),
    util = require("../util"),
    hiredis = require("hiredis");

exports.debug_mode = false;
exports.name = "hiredis";

function HiredisReplyParser(options) {
    this.name = exports.name;
    this.options = options || {***REMOVED***;
    this.reset();
    events.EventEmitter.call(this);
***REMOVED***

util.inherits(HiredisReplyParser, events.EventEmitter);

exports.Parser = HiredisReplyParser;

HiredisReplyParser.prototype.reset = function () {
    this.reader = new hiredis.Reader({
        return_buffers: this.options.return_buffers || false
    ***REMOVED***);
***REMOVED***;

HiredisReplyParser.prototype.execute = function (data) {
    var reply;
    this.reader.feed(data);
    while (true) {
        try {
            reply = this.reader.get();
        ***REMOVED*** catch (err) {
            this.emit("error", err);
            break;
        ***REMOVED***

        if (reply === undefined) {
            break;
        ***REMOVED***

        if (reply && reply.constructor === Error) {
            this.emit("reply error", reply);
        ***REMOVED*** else {
            this.emit("reply", reply);
        ***REMOVED***
    ***REMOVED***
***REMOVED***;
