// Load modules

var Lab = require('lab');
var Qs = require('../');


// Declare internals

var internals = {***REMOVED***;


// Test shortcuts

var expect = Lab.expect;
var before = Lab.before;
var after = Lab.after;
var describe = Lab.experiment;
var it = Lab.test;


describe('#stringify', function () {

    it('stringifies a querystring object', function (done) {

        expect(Qs.stringify({ a: 'b' ***REMOVED***)).to.equal('a=b');
        expect(Qs.stringify({ a: 1 ***REMOVED***)).to.equal('a=1');
        expect(Qs.stringify({ a: 1, b: 2 ***REMOVED***)).to.equal('a=1&b=2');
        done();
    ***REMOVED***);

    it('stringifies a nested object', function (done) {

        expect(Qs.stringify({ a: { b: 'c' ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D=c');
        expect(Qs.stringify({ a: { b: { c: { d: 'e' ***REMOVED*** ***REMOVED*** ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D%5Bc%5D%5Bd%5D=e');
        done();
    ***REMOVED***);

    it('stringifies an array value', function (done) {

        expect(Qs.stringify({ a: ['b', 'c', 'd'] ***REMOVED***)).to.equal('a%5B0%5D=b&a%5B1%5D=c&a%5B2%5D=d');
        done();
    ***REMOVED***);

    it('stringifies a nested array value', function (done) {

        expect(Qs.stringify({ a: { b: ['c', 'd'] ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D%5B0%5D=c&a%5Bb%5D%5B1%5D=d');
        done();
    ***REMOVED***);

    it('stringifies an object inside an array', function (done) {

        expect(Qs.stringify({ a: [{ b: 'c' ***REMOVED***] ***REMOVED***)).to.equal('a%5B0%5D%5Bb%5D=c');
        expect(Qs.stringify({ a: [{ b: { c: [1] ***REMOVED*** ***REMOVED***] ***REMOVED***)).to.equal('a%5B0%5D%5Bb%5D%5Bc%5D%5B0%5D=1');
        done();
    ***REMOVED***);

    it('stringifies a complicated object', function (done) {

        expect(Qs.stringify({ a: { b: 'c', d: 'e' ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D=c&a%5Bd%5D=e');
        done();
    ***REMOVED***);

    it('stringifies an empty value', function (done) {

        expect(Qs.stringify({ a: '' ***REMOVED***)).to.equal('a=');
        expect(Qs.stringify({ a: '', b: '' ***REMOVED***)).to.equal('a=&b=');
        expect(Qs.stringify({ a: null ***REMOVED***)).to.equal('a=');
        expect(Qs.stringify({ a: { b: null ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D=');
        done();
    ***REMOVED***);

    it('drops keys with a value of undefined', function (done) {

        expect(Qs.stringify({ a: undefined ***REMOVED***)).to.equal('');
        expect(Qs.stringify({ a: { b: undefined, c: null ***REMOVED*** ***REMOVED***)).to.equal('a%5Bc%5D=');
        done();
    ***REMOVED***);

    it('url encodes values', function (done) {

        expect(Qs.stringify({ a: 'b c' ***REMOVED***)).to.equal('a=b%20c');
        done();
    ***REMOVED***);

    it('stringifies a date', function (done) {

        var now = new Date();
        var str = 'a=' + encodeURIComponent(now.toISOString());
        expect(Qs.stringify({ a: now ***REMOVED***)).to.equal(str);
        done();
    ***REMOVED***);

    it('stringifies the weird object from qs', function (done) {

        expect(Qs.stringify({ 'my weird field': 'q1!2"\'w$5&7/z8)?' ***REMOVED***)).to.equal('my%20weird%20field=q1!2%22\'w%245%267%2Fz8)%3F');
        done();
    ***REMOVED***);

    it('skips properties that are part of the object prototype', function (done) {

        Object.prototype.crash = 'test';
        expect(Qs.stringify({ a: 'b'***REMOVED***)).to.equal('a=b');
        expect(Qs.stringify({ a: { b: 'c' ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D=c');
        delete Object.prototype.crash;
        done();
    ***REMOVED***);

    it('stringifies boolean values', function (done) {

        expect(Qs.stringify({ a: true ***REMOVED***)).to.equal('a=true');
        expect(Qs.stringify({ a: { b: true ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D=true');
        expect(Qs.stringify({ b: false ***REMOVED***)).to.equal('b=false');
        expect(Qs.stringify({ b: { c: false ***REMOVED*** ***REMOVED***)).to.equal('b%5Bc%5D=false');
        done();
    ***REMOVED***);

    it('stringifies buffer values', function (done) {

        expect(Qs.stringify({ a: new Buffer('test') ***REMOVED***)).to.equal('a=test');
        expect(Qs.stringify({ a: { b: new Buffer('test') ***REMOVED*** ***REMOVED***)).to.equal('a%5Bb%5D=test');
        done();
    ***REMOVED***);

    it('stringifies an object using an alternative delimiter', function (done) {

        expect(Qs.stringify({ a: 'b', c: 'd' ***REMOVED***, ';')).to.equal('a=b;c=d');
        done();
    ***REMOVED***);
***REMOVED***);
