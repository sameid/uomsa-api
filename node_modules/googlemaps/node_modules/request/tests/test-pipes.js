var server = require('./server')
  , events = require('events')
  , stream = require('stream')
  , assert = require('assert')
  , fs = require('fs')
  , request = require('../main.js')
  , path = require('path')
  , util = require('util')
  ;

var s = server.createServer(3453);

function ValidationStream(str) {
  this.str = str
  this.buf = ''
  this.on('data', function (data) {
    this.buf += data
  ***REMOVED***)
  this.on('end', function () {
    assert.equal(this.str, this.buf)
  ***REMOVED***)
  this.writable = true
***REMOVED***
util.inherits(ValidationStream, stream.Stream)
ValidationStream.prototype.write = function (chunk) {
  this.emit('data', chunk)
***REMOVED***
ValidationStream.prototype.end = function (chunk) {
  if (chunk) emit('data', chunk)
  this.emit('end')
***REMOVED***

s.listen(s.port, function () {
  counter = 0;

  var check = function () {
    counter = counter - 1
    if (counter === 0) {
      console.log('All tests passed.')
      setTimeout(function () {
        process.exit();
      ***REMOVED***, 500)
    ***REMOVED***
  ***REMOVED***

  // Test pipeing to a request object
  s.once('/push', server.createPostValidator("mydata"));

  var mydata = new stream.Stream();
  mydata.readable = true

  counter++
  var r1 = request.put({url:'http://localhost:3453/push'***REMOVED***, function () {
    check();
  ***REMOVED***)
  mydata.pipe(r1)

  mydata.emit('data', 'mydata');
  mydata.emit('end');


  // Test pipeing from a request object.
  s.once('/pull', server.createGetResponse("mypulldata"));

  var mypulldata = new stream.Stream();
  mypulldata.writable = true

  counter++
  request({url:'http://localhost:3453/pull'***REMOVED***).pipe(mypulldata)

  var d = '';

  mypulldata.write = function (chunk) {
    d += chunk;
  ***REMOVED***
  mypulldata.end = function () {
    assert.equal(d, 'mypulldata');
    check();
  ***REMOVED***;


  s.on('/cat', function (req, resp) {
    if (req.method === "GET") {
      resp.writeHead(200, {'content-type':'text/plain-test', 'content-length':4***REMOVED***);
      resp.end('asdf')
    ***REMOVED*** else if (req.method === "PUT") {
      assert.equal(req.headers['content-type'], 'text/plain-test');
      assert.equal(req.headers['content-length'], 4)
      var validate = '';

      req.on('data', function (chunk) {validate += chunk***REMOVED***)
      req.on('end', function () {
        resp.writeHead(201);
        resp.end();
        assert.equal(validate, 'asdf');
        check();
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***)
  s.on('/pushjs', function (req, resp) {
    if (req.method === "PUT") {
      assert.equal(req.headers['content-type'], 'text/javascript');
      check();
    ***REMOVED***
  ***REMOVED***)
  s.on('/catresp', function (req, resp) {
    request.get('http://localhost:3453/cat').pipe(resp)
  ***REMOVED***)
  s.on('/doodle', function (req, resp) {
    if (req.headers['x-oneline-proxy']) {
      resp.setHeader('x-oneline-proxy', 'yup')
    ***REMOVED***
    resp.writeHead('200', {'content-type':'image/png'***REMOVED***)
    fs.createReadStream(path.join(__dirname, 'googledoodle.png')).pipe(resp)
  ***REMOVED***)
  s.on('/onelineproxy', function (req, resp) {
    var x = request('http://localhost:3453/doodle')
    req.pipe(x)
    x.pipe(resp)
  ***REMOVED***)

  counter++
  fs.createReadStream(__filename).pipe(request.put('http://localhost:3453/pushjs'))

  counter++
  request.get('http://localhost:3453/cat').pipe(request.put('http://localhost:3453/cat'))

  counter++
  request.get('http://localhost:3453/catresp', function (e, resp, body) {
    assert.equal(resp.headers['content-type'], 'text/plain-test');
    assert.equal(resp.headers['content-length'], 4)
    check();
  ***REMOVED***)

  var doodleWrite = fs.createWriteStream(path.join(__dirname, 'test.png'))

  counter++
  request.get('http://localhost:3453/doodle').pipe(doodleWrite)

  doodleWrite.on('close', function () {
    assert.deepEqual(fs.readFileSync(path.join(__dirname, 'googledoodle.png')), fs.readFileSync(path.join(__dirname, 'test.png')))
    check()
  ***REMOVED***)

  process.on('exit', function () {
    fs.unlinkSync(path.join(__dirname, 'test.png'))
  ***REMOVED***)

  counter++
  request.get({uri:'http://localhost:3453/onelineproxy', headers:{'x-oneline-proxy':'nope'***REMOVED******REMOVED***, function (err, resp, body) {
    assert.equal(resp.headers['x-oneline-proxy'], 'yup')
    check()
  ***REMOVED***)

  s.on('/afterresponse', function (req, resp) {
    resp.write('d')
    resp.end()
  ***REMOVED***)

  counter++
  var afterresp = request.post('http://localhost:3453/afterresponse').on('response', function () {
    var v = new ValidationStream('d')
    afterresp.pipe(v)
    v.on('end', check)
  ***REMOVED***)

***REMOVED***)
