
/**
 * Module dependencies.
 */

var mongoose = require('mongoose')
  , Schema = mongoose.Schema;

/**
 * Schema definition
 */

// recursive embedded-document schema

var Comment = new Schema();

Comment.add({
    title     : { type: String, index: true ***REMOVED***
  , date      : Date
  , body      : String
  , comments  : [Comment]
***REMOVED***);

var BlogPost = new Schema({
    title     : { type: String, index: true ***REMOVED***
  , slug      : { type: String, lowercase: true, trim: true ***REMOVED***
  , date      : Date
  , buf       : Buffer
  , comments  : [Comment]
  , creator   : Schema.ObjectId
***REMOVED***);

var Person = new Schema({
    name: {
        first: String
      , last : String
    ***REMOVED***
  , email: { type: String, required: true, index: { unique: true, sparse: true ***REMOVED*** ***REMOVED***
  , alive: Boolean
***REMOVED***);

/**
 * Accessing a specific schema type by key
 */

BlogPost.path('date')
.default(function(){
   return new Date()
 ***REMOVED***)
.set(function(v){
   return v == 'now' ? new Date() : v;
 ***REMOVED***);

/**
 * Pre hook.
 */

BlogPost.pre('save', function(next, done){
  emailAuthor(done); // some async function
  next();
***REMOVED***);

/**
 * Methods
 */

BlogPost.methods.findCreator = function (callback) {
  return this.db.model('Person').findById(this.creator, callback);
***REMOVED***

BlogPost.statics.findByTitle = function (title, callback) {
  return this.find({ title: title ***REMOVED***, callback);
***REMOVED***

BlogPost.methods.expressiveQuery = function (creator, date, callback) {
  return this.find('creator', creator).where('date').gte(date).run(callback);
***REMOVED***

/**
 * Plugins
 */

function slugGenerator (options){
  options = options || {***REMOVED***;
  var key = options.key || 'title';

  return function slugGenerator(schema){
    schema.path(key).set(function(v){
      this.slug = v.toLowerCase().replace(/[^a-z0-9]/g, '').replace(/-+/g, '');
      return v;
    ***REMOVED***);
  ***REMOVED***;
***REMOVED***;

BlogPost.plugin(slugGenerator());

/**
 * Define model.
 */

mongoose.model('BlogPost', BlogPost);
mongoose.model('Person', Person);
