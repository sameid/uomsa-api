{
  "name": "bson",
  "description": "A bson parser for node.js and the browser",
  "keywords": [
    "mongodb",
    "bson",
    "parser"
  ],
  "version": "0.2.2",
  "author": {
    "name": "Christian Amor Kvalheim",
    "email": "christkv@gmail.com"
  ***REMOVED***,
  "contributors": [],
  "repository": {
    "type": "git",
    "url": "git://github.com/mongodb/js-bson.git"
  ***REMOVED***,
  "bugs": {
    "url": "https://github.com/mongodb/js-bson/issues"
  ***REMOVED***,
  "devDependencies": {
    "nodeunit": "0.7.3",
    "gleak": "0.2.3",
    "one": "2.X.X"
  ***REMOVED***,
  "config": {
    "native": false
  ***REMOVED***,
  "main": "./lib/bson/index",
  "directories": {
    "lib": "./lib/bson"
  ***REMOVED***,
  "engines": {
    "node": ">=0.6.19"
  ***REMOVED***,
  "scripts": {
    "install": "(node-gyp rebuild 2> builderror.log) || (exit 0)",
    "test": "nodeunit ./test/node && TEST_NATIVE=TRUE nodeunit ./test/node"
  ***REMOVED***,
  "licenses": [
    {
      "type": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    ***REMOVED***
  ],
  "readme": "Javascript + C++ BSON parser\n============================\n\nThis BSON parser is primarily meant for usage with the `mongodb` node.js driver. However thanks to such wonderful tools at `onejs` we are able to package up a BSON parser that will work in the browser aswell. The current build is located in the `browser_build/bson.js` file.\n\nA simple example on how to use it\n\n    <head>\n      <script src=\"https://raw.github.com/mongodb/js-bson/master/browser_build/bson.js\">\n      </script>\n    </head>\n    <body onload=\"start();\">\n    <script>\n      function start() {\n        var BSON = bson().BSON;\n        var Long = bson().Long;\n\n        var doc = {long: Long.fromNumber(100)***REMOVED***\n\n        // Serialize a document\n        var data = BSON.serialize(doc, false, true, false);\n        // De serialize it again\n        var doc_2 = BSON.deserialize(data);\n      ***REMOVED***\n    </script>\n    </body>\n\n  It's got two simple methods to use in your application.\n\n  * BSON.serialize(object, checkKeys, asBuffer, serializeFunctions)\n     * @param {Object***REMOVED*** object the Javascript object to serialize.\n     * @param {Boolean***REMOVED*** checkKeys the serializer will check if keys are valid.\n     * @param {Boolean***REMOVED*** asBuffer return the serialized object as a Buffer object **(ignore)**.\n     * @param {Boolean***REMOVED*** serializeFunctions serialize the javascript functions **(default:false)**\n     * @return {TypedArray/Array***REMOVED*** returns a TypedArray or Array depending on what your browser supports\n \n  * BSON.deserialize(buffer, options, isArray)\n     * Options\n       * **evalFunctions** {Boolean, default:false***REMOVED***, evaluate functions in the BSON document scoped to the object deserialized.\n       * **cacheFunctions** {Boolean, default:false***REMOVED***, cache evaluated functions for reuse.\n       * **cacheFunctionsCrc32** {Boolean, default:false***REMOVED***, use a crc32 code for caching, otherwise use the string of the function.\n     * @param {TypedArray/Array***REMOVED*** a TypedArray/Array containing the BSON data\n     * @param {Object***REMOVED*** [options] additional options used for the deserialization.\n     * @param {Boolean***REMOVED*** [isArray] ignore used for recursive parsing.\n     * @return {Object***REMOVED*** returns the deserialized Javascript Object.\n",
  "readmeFilename": "README.md",
  "_id": "bson@0.2.2",
  "dist": {
    "shasum": "c4bae9d0803bf49178f458bf94d8b592b4c1ee68"
  ***REMOVED***,
  "_from": "bson@0.2.2",
  "_resolved": "https://registry.npmjs.org/bson/-/bson-0.2.2.tgz"
***REMOVED***
