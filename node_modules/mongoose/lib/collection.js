
/*!
 * Module dependencies.
 */

var STATES = require('./connectionstate')

/**
 * Abstract Collection constructor
 *
 * This is the base class that drivers inherit from and implement.
 *
 * @param {String***REMOVED*** name name of the collection
 * @param {Connection***REMOVED*** conn A MongooseConnection instance
 * @param {Object***REMOVED*** opts optional collection options
 * @api public
 */

function Collection (name, conn, opts) {
  if (undefined === opts) opts = {***REMOVED***;
  if (undefined === opts.capped) opts.capped = {***REMOVED***;

  opts.bufferCommands = undefined === opts.bufferCommands
    ? true
    : opts.bufferCommands;

  if ('number' == typeof opts.capped) {
    opts.capped = { size: opts.capped ***REMOVED***;
  ***REMOVED***

  this.opts = opts;
  this.name = name;
  this.conn = conn;
  this.queue = [];
  this.buffer = this.opts.bufferCommands;

  if (STATES.connected == this.conn.readyState) {
    this.onOpen();
  ***REMOVED***
***REMOVED***;

/**
 * The collection name
 *
 * @api public
 * @property name
 */

Collection.prototype.name;

/**
 * The Connection instance
 *
 * @api public
 * @property conn
 */

Collection.prototype.conn;

/**
 * Called when the database connects
 *
 * @api private
 */

Collection.prototype.onOpen = function () {
  var self = this;
  this.buffer = false;
  self.doQueue();
***REMOVED***;

/**
 * Called when the database disconnects
 *
 * @api private
 */

Collection.prototype.onClose = function () {
  if (this.opts.bufferCommands) {
    this.buffer = true;
  ***REMOVED***
***REMOVED***;

/**
 * Queues a method for later execution when its
 * database connection opens.
 *
 * @param {String***REMOVED*** name name of the method to queue
 * @param {Array***REMOVED*** args arguments to pass to the method when executed
 * @api private
 */

Collection.prototype.addQueue = function (name, args) {
  this.queue.push([name, args]);
  return this;
***REMOVED***;

/**
 * Executes all queued methods and clears the queue.
 *
 * @api private
 */

Collection.prototype.doQueue = function () {
  for (var i = 0, l = this.queue.length; i < l; i++){
    this[this.queue[i][0]].apply(this, this.queue[i][1]);
  ***REMOVED***
  this.queue = [];
  return this;
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.ensureIndex = function(){
  throw new Error('Collection#ensureIndex unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.findAndModify = function(){
  throw new Error('Collection#findAndModify unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.findOne = function(){
  throw new Error('Collection#findOne unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.find = function(){
  throw new Error('Collection#find unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.insert = function(){
  throw new Error('Collection#insert unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.save = function(){
  throw new Error('Collection#save unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.update = function(){
  throw new Error('Collection#update unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.getIndexes = function(){
  throw new Error('Collection#getIndexes unimplemented by driver');
***REMOVED***;

/**
 * Abstract method that drivers must implement.
 */

Collection.prototype.mapReduce = function(){
  throw new Error('Collection#mapReduce unimplemented by driver');
***REMOVED***;

/*!
 * Module exports.
 */

module.exports = Collection;
