/*!
 * Module dependencies.
 */

var Document = require('../document')
  , inspect = require('util').inspect;

/**
 * EmbeddedDocument constructor.
 *
 * @param {Object***REMOVED*** obj js object returned from the db
 * @param {MongooseDocumentArray***REMOVED*** parentArr the parent array of this document
 * @param {Boolean***REMOVED*** skipId
 * @inherits Document
 * @api private
 */

function EmbeddedDocument (obj, parentArr, skipId, fields) {
  if (parentArr) {
    this.__parentArray = parentArr;
    this.__parent = parentArr._parent;
  ***REMOVED*** else {
    this.__parentArray = undefined;
    this.__parent = undefined;
  ***REMOVED***

  Document.call(this, obj, fields, skipId);

  var self = this;
  this.on('isNew', function (val) {
    self.isNew = val;
  ***REMOVED***);
***REMOVED***;

/*!
 * Inherit from Document
 */

EmbeddedDocument.prototype.__proto__ = Document.prototype;

/**
 * Marks the embedded doc modified.
 *
 * ####Example:
 *
 *     var doc = blogpost.comments.id(hexstring);
 *     doc.mixed.type = 'changed';
 *     doc.markModified('mixed.type');
 *
 * @param {String***REMOVED*** path the path which changed
 * @api public
 */

EmbeddedDocument.prototype.markModified = function (path) {
  if (!this.__parentArray) return;

  this.$__.activePaths.modify(path);

  if (this.isNew) {
    // Mark the WHOLE parent array as modified
    // if this is a new document (i.e., we are initializing
    // a document),
    this.__parentArray._markModified();
  ***REMOVED*** else
    this.__parentArray._markModified(this, path);
***REMOVED***;

/**
 * Used as a stub for [hooks.js](https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3)
 *
 * ####NOTE:
 *
 * _This is a no-op. Does not actually save the doc to the db._
 *
 * @param {Function***REMOVED*** [fn]
 * @return {EmbeddedDocument***REMOVED*** this
 * @api private
 */

EmbeddedDocument.prototype.save = function(fn) {
  if (fn)
    fn(null);
  return this;
***REMOVED***;

/**
 * Removes the subdocument from its parent array.
 *
 * @param {Function***REMOVED*** [fn]
 * @api public
 */

EmbeddedDocument.prototype.remove = function (fn) {
  if (!this.__parentArray) return this;

  var _id;
  if (!this.willRemove) {
    _id = this._doc._id;
    if (!_id) {
      throw new Error('For your own good, Mongoose does not know ' +
                      'how to remove an EmbeddedDocument that has no _id');
    ***REMOVED***
    this.__parentArray.pull({ _id: _id ***REMOVED***);
    this.willRemove = true;
  ***REMOVED***

  if (fn)
    fn(null);

  return this;
***REMOVED***;

/**
 * Override #update method of parent documents.
 * @api private
 */

EmbeddedDocument.prototype.update = function () {
  throw new Error('The #update method is not available on EmbeddedDocuments');
***REMOVED***

/**
 * Helper for console.log
 *
 * @api public
 */

EmbeddedDocument.prototype.inspect = function () {
  return inspect(this.toObject());
***REMOVED***;

/**
 * Marks a path as invalid, causing validation to fail.
 *
 * @param {String***REMOVED*** path the field to invalidate
 * @param {String|Error***REMOVED*** err error which states the reason `path` was invalid
 * @return {Boolean***REMOVED***
 * @api public
 */

EmbeddedDocument.prototype.invalidate = function (path, err, val, first) {
  if (!this.__parent) {
    var msg = 'Unable to invalidate a subdocument that has not been added to an array.'
    throw new Error(msg);
  ***REMOVED***

  var index = this.__parentArray.indexOf(this);
  var parentPath = this.__parentArray._path;
  var fullPath = [parentPath, index, path].join('.');

  // sniffing arguments:
  // need to check if user passed a value to keep
  // our error message clean.
  if (2 < arguments.length) {
    this.__parent.invalidate(fullPath, err, val);
  ***REMOVED*** else {
    this.__parent.invalidate(fullPath, err);
  ***REMOVED***

  if (first)
    this.$__.validationError = this.ownerDocument().$__.validationError;
  return true;
***REMOVED***

/**
 * Returns the top level document of this sub-document.
 *
 * @return {Document***REMOVED***
 */

EmbeddedDocument.prototype.ownerDocument = function () {
  if (this.$__.ownerDocument) {
    return this.$__.ownerDocument;
  ***REMOVED***

  var parent = this.__parent;
  if (!parent) return this;

  while (parent.__parent) {
    parent = parent.__parent;
  ***REMOVED***

  return this.$__.ownerDocument = parent;
***REMOVED***

/**
 * Returns the full path to this document. If optional `path` is passed, it is appended to the full path.
 *
 * @param {String***REMOVED*** [path]
 * @return {String***REMOVED***
 * @api private
 * @method $__fullPath
 * @memberOf EmbeddedDocument
 */

EmbeddedDocument.prototype.$__fullPath = function (path) {
  if (!this.$__.fullPath) {
    var parent = this;
    if (!parent.__parent) return path;

    var paths = [];
    while (parent.__parent) {
      paths.unshift(parent.__parentArray._path);
      parent = parent.__parent;
    ***REMOVED***

    this.$__.fullPath = paths.join('.');

    if (!this.$__.ownerDocument) {
      // optimization
      this.$__.ownerDocument = parent;
    ***REMOVED***
  ***REMOVED***

  return path
    ? this.$__.fullPath + '.' + path
    : this.$__.fullPath;
***REMOVED***

/**
 * Returns this sub-documents parent document.
 *
 * @api public
 */

EmbeddedDocument.prototype.parent = function () {
  return this.__parent;
***REMOVED***

/**
 * Returns this sub-documents parent array.
 *
 * @api public
 */

EmbeddedDocument.prototype.parentArray = function () {
  return this.__parentArray;
***REMOVED***

/*!
 * Module exports.
 */

module.exports = EmbeddedDocument;
