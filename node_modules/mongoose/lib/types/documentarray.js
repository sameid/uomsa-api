
/*!
 * Module dependencies.
 */

var MongooseArray = require('./array')
  , driver = global.MONGOOSE_DRIVER_PATH || '../drivers/node-mongodb-native'
  , ObjectId = require(driver + '/objectid')
  , ObjectIdSchema = require('../schema/objectid')
  , utils = require('../utils')
  , util = require('util')
  , Document = require('../document')

/**
 * DocumentArray constructor
 *
 * @param {Array***REMOVED*** values
 * @param {String***REMOVED*** path the path to this array
 * @param {Document***REMOVED*** doc parent document
 * @api private
 * @return {MongooseDocumentArray***REMOVED***
 * @inherits MongooseArray
 * @see http://bit.ly/f6CnZU
 */

function MongooseDocumentArray (values, path, doc) {
  var arr = [];

  // Values always have to be passed to the constructor to initialize, since
  // otherwise MongooseArray#push will mark the array as modified to the parent.
  arr.push.apply(arr, values);
  arr.__proto__ = MongooseDocumentArray.prototype;

  arr._atomics = {***REMOVED***;
  arr.validators = [];
  arr._path = path;

  if (doc) {
    arr._parent = doc;
    arr._schema = doc.schema.path(path);
    doc.on('save', arr.notify('save'));
    doc.on('isNew', arr.notify('isNew'));
  ***REMOVED***

  return arr;
***REMOVED***;

/*!
 * Inherits from MongooseArray
 */

MongooseDocumentArray.prototype.__proto__ = MongooseArray.prototype;

/**
 * Overrides MongooseArray#cast
 *
 * @api private
 */

MongooseDocumentArray.prototype._cast = function (value) {
  if (value instanceof this._schema.casterConstructor) {
    if (!(value.__parent && value.__parentArray)) {
      // value may have been created using array.create()
      value.__parent = this._parent;
      value.__parentArray = this;
    ***REMOVED***
    return value;
  ***REMOVED***

  // handle cast('string') or cast(ObjectId) etc.
  // only objects are permitted so we can safely assume that
  // non-objects are to be interpreted as _id
  if (Buffer.isBuffer(value) ||
      value instanceof ObjectId || !utils.isObject(value)) {
    value = { _id: value ***REMOVED***;
  ***REMOVED***

  return new this._schema.casterConstructor(value, this);
***REMOVED***;

/**
 * Searches array items for the first document with a matching _id.
 *
 * ####Example:
 *
 *     var embeddedDoc = m.array.id(some_id);
 *
 * @return {EmbeddedDocument|null***REMOVED*** the subdocuent or null if not found.
 * @param {ObjectId|String|Number|Buffer***REMOVED*** id
 * @api public
 */

MongooseDocumentArray.prototype.id = function (id) {
  var casted
    , sid
    , _id

  try {
    casted = ObjectId.toString(ObjectIdSchema.prototype.cast.call({***REMOVED***, id));
  ***REMOVED*** catch (e) {
    casted = null;
  ***REMOVED***

  for (var i = 0, l = this.length; i < l; i++) {
    _id = this[i].get('_id');

    if (_id instanceof Document) {
      sid || (sid = String(id));
      if (sid == _id._id) return this[i];
    ***REMOVED*** else if (!(_id instanceof ObjectId)) {
      sid || (sid = String(id));
      if (sid == _id) return this[i];
    ***REMOVED*** else if (casted == _id) {
      return this[i];
    ***REMOVED***
  ***REMOVED***

  return null;
***REMOVED***;

/**
 * Returns a native js Array of plain js objects
 *
 * ####NOTE:
 *
 * _Each sub-document is converted to a plain object by calling its `#toObject` method._
 *
 * @param {Object***REMOVED*** [options] optional options to pass to each documents `toObject` method call during conversion
 * @return {Array***REMOVED***
 * @api public
 */

MongooseDocumentArray.prototype.toObject = function (options) {
  return this.map(function (doc) {
    return doc && doc.toObject(options) || null;
  ***REMOVED***);
***REMOVED***;

/**
 * Helper for console.log
 *
 * @api public
 */

MongooseDocumentArray.prototype.inspect = function () {
  return '[' + this.map(function (doc) {
    if (doc) {
      return doc.inspect
        ? doc.inspect()
        : util.inspect(doc)
    ***REMOVED***
    return 'null'
  ***REMOVED***).join('\n') + ']';
***REMOVED***;

/**
 * Creates a subdocument casted to this schema.
 *
 * This is the same subdocument constructor used for casting.
 *
 * @param {Object***REMOVED*** obj the value to cast to this arrays SubDocument schema
 * @api public
 */

MongooseDocumentArray.prototype.create = function (obj) {
  return new this._schema.casterConstructor(obj);
***REMOVED***

/**
 * Creates a fn that notifies all child docs of `event`.
 *
 * @param {String***REMOVED*** event
 * @return {Function***REMOVED***
 * @api private
 */

MongooseDocumentArray.prototype.notify = function notify (event) {
  var self = this;
  return function notify (val) {
    var i = self.length;
    while (i--) {
      if (!self[i]) continue;
      self[i].emit(event, val);
    ***REMOVED***
  ***REMOVED***
***REMOVED***

/*!
 * Module exports.
 */

module.exports = MongooseDocumentArray;
