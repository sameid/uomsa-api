
/// Serialize the a name value pair into a cookie string suitable for
/// http headers. An optional options object specified cookie parameters
///
/// serialize('foo', 'bar', { httpOnly: true ***REMOVED***)
///   => "foo=bar; httpOnly"
///
/// @param {String***REMOVED*** name
/// @param {String***REMOVED*** val
/// @param {Object***REMOVED*** options
/// @return {String***REMOVED***
var serialize = function(name, val, opt){
    opt = opt || {***REMOVED***;
    var enc = opt.encode || encode;
    var pairs = [name + '=' + enc(val)];

    if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge)) throw new Error('maxAge should be a Number');
        pairs.push('Max-Age=' + maxAge);
    ***REMOVED***

    if (opt.domain) pairs.push('Domain=' + opt.domain);
    if (opt.path) pairs.push('Path=' + opt.path);
    if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());
    if (opt.httpOnly) pairs.push('HttpOnly');
    if (opt.secure) pairs.push('Secure');

    return pairs.join('; ');
***REMOVED***;

/// Parse the given cookie header string into an object
/// The object has the various cookies as keys(names) => values
/// @param {String***REMOVED*** str
/// @return {Object***REMOVED***
var parse = function(str, opt) {
    opt = opt || {***REMOVED***;
    var obj = {***REMOVED***
    var pairs = str.split(/; */);
    var dec = opt.decode || decode;

    pairs.forEach(function(pair) {
        var eq_idx = pair.indexOf('=')

        // skip things that don't look like key=value
        if (eq_idx < 0) {
            return;
        ***REMOVED***

        var key = pair.substr(0, eq_idx).trim()
        var val = pair.substr(++eq_idx, pair.length).trim();

        // quoted values
        if ('"' == val[0]) {
            val = val.slice(1, -1);
        ***REMOVED***

        // only assign once
        if (undefined == obj[key]) {
            try {
                obj[key] = dec(val);
            ***REMOVED*** catch (e) {
                obj[key] = val;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***);

    return obj;
***REMOVED***;

var encode = encodeURIComponent;
var decode = decodeURIComponent;

module.exports.serialize = serialize;
module.exports.parse = parse;
